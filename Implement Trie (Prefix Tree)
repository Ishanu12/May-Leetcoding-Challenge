class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.val = ""
        self.isWord = 0
        self.children = []

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        ptr = self
        for char in word:
            found = False
            for child in ptr.children:
                if child.val == char:
                    found = True
                    ptr = child
                    break
            if not found:
                newnode = Trie()
                newnode.val = char
                ptr.children.append(newnode)
                ptr = newnode
        ptr.isWord = 1
            

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        ptr = self
        found = False
        for char in word:
            for child in ptr.children:
                if child.val == char:
                    ptr = child
                    word = word[1:]
                    found = True
                    break
                else:
                    found = False
        if found == False:
            return False
        if len(word) == 0 and ptr.isWord == 1:
            return True
        else:
            return False
        
    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        ptr = self
        # if len(ptr.children) == 0:
        #     return False
        found = False
        for char in prefix:
            for child in ptr.children:
                if child.val == char:
                    ptr = child
                    found = True
                    prefix = prefix[1:]
                    break
                else:
                    found = False
        if len(prefix) == 0 and found == True:
            return True    
        else:
            return False
